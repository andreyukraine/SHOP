// Generated by view binder compiler. Do not edit!
package com.preethzcodez.ecommerce.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.preethzcodez.ecommerce.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class OrderItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView Comment;

  @NonNull
  public final TextView clientOrder;

  @NonNull
  public final RelativeLayout itemOrder;

  @NonNull
  public final TextView numberOrder;

  @NonNull
  public final TextView orderStatus;

  @NonNull
  public final TextView orderStore;

  @NonNull
  public final TextView textClient;

  @NonNull
  public final TextView textComment;

  @NonNull
  public final TextView textStatus;

  @NonNull
  public final TextView textStore;

  @NonNull
  public final TextView totalOrder;

  @NonNull
  public final TextView totalOrder1C;

  private OrderItemBinding(@NonNull RelativeLayout rootView, @NonNull TextView Comment,
      @NonNull TextView clientOrder, @NonNull RelativeLayout itemOrder,
      @NonNull TextView numberOrder, @NonNull TextView orderStatus, @NonNull TextView orderStore,
      @NonNull TextView textClient, @NonNull TextView textComment, @NonNull TextView textStatus,
      @NonNull TextView textStore, @NonNull TextView totalOrder, @NonNull TextView totalOrder1C) {
    this.rootView = rootView;
    this.Comment = Comment;
    this.clientOrder = clientOrder;
    this.itemOrder = itemOrder;
    this.numberOrder = numberOrder;
    this.orderStatus = orderStatus;
    this.orderStore = orderStore;
    this.textClient = textClient;
    this.textComment = textComment;
    this.textStatus = textStatus;
    this.textStore = textStore;
    this.totalOrder = totalOrder;
    this.totalOrder1C = totalOrder1C;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static OrderItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static OrderItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.order_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static OrderItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.Comment;
      TextView Comment = rootView.findViewById(id);
      if (Comment == null) {
        break missingId;
      }

      id = R.id.clientOrder;
      TextView clientOrder = rootView.findViewById(id);
      if (clientOrder == null) {
        break missingId;
      }

      RelativeLayout itemOrder = (RelativeLayout) rootView;

      id = R.id.numberOrder;
      TextView numberOrder = rootView.findViewById(id);
      if (numberOrder == null) {
        break missingId;
      }

      id = R.id.orderStatus;
      TextView orderStatus = rootView.findViewById(id);
      if (orderStatus == null) {
        break missingId;
      }

      id = R.id.orderStore;
      TextView orderStore = rootView.findViewById(id);
      if (orderStore == null) {
        break missingId;
      }

      id = R.id.textClient;
      TextView textClient = rootView.findViewById(id);
      if (textClient == null) {
        break missingId;
      }

      id = R.id.textComment;
      TextView textComment = rootView.findViewById(id);
      if (textComment == null) {
        break missingId;
      }

      id = R.id.textStatus;
      TextView textStatus = rootView.findViewById(id);
      if (textStatus == null) {
        break missingId;
      }

      id = R.id.textStore;
      TextView textStore = rootView.findViewById(id);
      if (textStore == null) {
        break missingId;
      }

      id = R.id.totalOrder;
      TextView totalOrder = rootView.findViewById(id);
      if (totalOrder == null) {
        break missingId;
      }

      id = R.id.totalOrder1C;
      TextView totalOrder1C = rootView.findViewById(id);
      if (totalOrder1C == null) {
        break missingId;
      }

      return new OrderItemBinding((RelativeLayout) rootView, Comment, clientOrder, itemOrder,
          numberOrder, orderStatus, orderStore, textClient, textComment, textStatus, textStore,
          totalOrder, totalOrder1C);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
