// Generated by view binder compiler. Do not edit!
package com.preethzcodez.ecommerce.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.preethzcodez.ecommerce.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ShoppingCartItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout blockPrice;

  @NonNull
  public final ImageView img;

  @NonNull
  public final RelativeLayout itemLay;

  @NonNull
  public final ImageView minus;

  @NonNull
  public final TextView options;

  @NonNull
  public final TextView percent;

  @NonNull
  public final ImageView plus;

  @NonNull
  public final TextView priceBase;

  @NonNull
  public final TextView priceClient;

  @NonNull
  public final LinearLayout qtyLay;

  @NonNull
  public final TextView quantity;

  @NonNull
  public final TextView quantityValue;

  @NonNull
  public final ImageView remove;

  @NonNull
  public final TextView title;

  private ShoppingCartItemBinding(@NonNull RelativeLayout rootView,
      @NonNull LinearLayout blockPrice, @NonNull ImageView img, @NonNull RelativeLayout itemLay,
      @NonNull ImageView minus, @NonNull TextView options, @NonNull TextView percent,
      @NonNull ImageView plus, @NonNull TextView priceBase, @NonNull TextView priceClient,
      @NonNull LinearLayout qtyLay, @NonNull TextView quantity, @NonNull TextView quantityValue,
      @NonNull ImageView remove, @NonNull TextView title) {
    this.rootView = rootView;
    this.blockPrice = blockPrice;
    this.img = img;
    this.itemLay = itemLay;
    this.minus = minus;
    this.options = options;
    this.percent = percent;
    this.plus = plus;
    this.priceBase = priceBase;
    this.priceClient = priceClient;
    this.qtyLay = qtyLay;
    this.quantity = quantity;
    this.quantityValue = quantityValue;
    this.remove = remove;
    this.title = title;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ShoppingCartItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ShoppingCartItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.shopping_cart_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ShoppingCartItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.block_price;
      LinearLayout blockPrice = rootView.findViewById(id);
      if (blockPrice == null) {
        break missingId;
      }

      id = R.id.img;
      ImageView img = rootView.findViewById(id);
      if (img == null) {
        break missingId;
      }

      RelativeLayout itemLay = (RelativeLayout) rootView;

      id = R.id.minus;
      ImageView minus = rootView.findViewById(id);
      if (minus == null) {
        break missingId;
      }

      id = R.id.options;
      TextView options = rootView.findViewById(id);
      if (options == null) {
        break missingId;
      }

      id = R.id.percent;
      TextView percent = rootView.findViewById(id);
      if (percent == null) {
        break missingId;
      }

      id = R.id.plus;
      ImageView plus = rootView.findViewById(id);
      if (plus == null) {
        break missingId;
      }

      id = R.id.priceBase;
      TextView priceBase = rootView.findViewById(id);
      if (priceBase == null) {
        break missingId;
      }

      id = R.id.priceClient;
      TextView priceClient = rootView.findViewById(id);
      if (priceClient == null) {
        break missingId;
      }

      id = R.id.qtyLay;
      LinearLayout qtyLay = rootView.findViewById(id);
      if (qtyLay == null) {
        break missingId;
      }

      id = R.id.quantity;
      TextView quantity = rootView.findViewById(id);
      if (quantity == null) {
        break missingId;
      }

      id = R.id.quantityValue;
      TextView quantityValue = rootView.findViewById(id);
      if (quantityValue == null) {
        break missingId;
      }

      id = R.id.remove;
      ImageView remove = rootView.findViewById(id);
      if (remove == null) {
        break missingId;
      }

      id = R.id.title;
      TextView title = rootView.findViewById(id);
      if (title == null) {
        break missingId;
      }

      return new ShoppingCartItemBinding((RelativeLayout) rootView, blockPrice, img, itemLay, minus,
          options, percent, plus, priceBase, priceClient, qtyLay, quantity, quantityValue, remove,
          title);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
