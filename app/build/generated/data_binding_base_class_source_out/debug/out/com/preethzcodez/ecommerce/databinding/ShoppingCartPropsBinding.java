// Generated by view binder compiler. Do not edit!
package com.preethzcodez.ecommerce.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.tabs.TabLayout;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.preethzcodez.ecommerce.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ShoppingCartPropsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final Spinner addresses;

  @NonNull
  public final LinearLayout botBlock;

  @NonNull
  public final TextInputLayout clAddress;

  @NonNull
  public final TextInputLayout clClient;

  @NonNull
  public final TextInputLayout clComment;

  @NonNull
  public final TextInputLayout clShipingDate;

  @NonNull
  public final TextInputEditText clientOrder;

  @NonNull
  public final LinearLayout clientOrderLine;

  @NonNull
  public final TextInputEditText comment;

  @NonNull
  public final Button crateOrder;

  @NonNull
  public final TextInputEditText editAddress;

  @NonNull
  public final RelativeLayout lineClient;

  @NonNull
  public final RelativeLayout orderPropBlock;

  @NonNull
  public final TextView payableAmtClient;

  @NonNull
  public final TextInputEditText shippingDate;

  @NonNull
  public final TabLayout tabs;

  @NonNull
  public final TextView textPayableAmtClient;

  @NonNull
  public final ToolbarBinding toolbar;

  private ShoppingCartPropsBinding(@NonNull RelativeLayout rootView, @NonNull Spinner addresses,
      @NonNull LinearLayout botBlock, @NonNull TextInputLayout clAddress,
      @NonNull TextInputLayout clClient, @NonNull TextInputLayout clComment,
      @NonNull TextInputLayout clShipingDate, @NonNull TextInputEditText clientOrder,
      @NonNull LinearLayout clientOrderLine, @NonNull TextInputEditText comment,
      @NonNull Button crateOrder, @NonNull TextInputEditText editAddress,
      @NonNull RelativeLayout lineClient, @NonNull RelativeLayout orderPropBlock,
      @NonNull TextView payableAmtClient, @NonNull TextInputEditText shippingDate,
      @NonNull TabLayout tabs, @NonNull TextView textPayableAmtClient,
      @NonNull ToolbarBinding toolbar) {
    this.rootView = rootView;
    this.addresses = addresses;
    this.botBlock = botBlock;
    this.clAddress = clAddress;
    this.clClient = clClient;
    this.clComment = clComment;
    this.clShipingDate = clShipingDate;
    this.clientOrder = clientOrder;
    this.clientOrderLine = clientOrderLine;
    this.comment = comment;
    this.crateOrder = crateOrder;
    this.editAddress = editAddress;
    this.lineClient = lineClient;
    this.orderPropBlock = orderPropBlock;
    this.payableAmtClient = payableAmtClient;
    this.shippingDate = shippingDate;
    this.tabs = tabs;
    this.textPayableAmtClient = textPayableAmtClient;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ShoppingCartPropsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ShoppingCartPropsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.shopping_cart_props, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ShoppingCartPropsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addresses;
      Spinner addresses = rootView.findViewById(id);
      if (addresses == null) {
        break missingId;
      }

      id = R.id.bot_block;
      LinearLayout botBlock = rootView.findViewById(id);
      if (botBlock == null) {
        break missingId;
      }

      id = R.id.cl_address;
      TextInputLayout clAddress = rootView.findViewById(id);
      if (clAddress == null) {
        break missingId;
      }

      id = R.id.cl_client;
      TextInputLayout clClient = rootView.findViewById(id);
      if (clClient == null) {
        break missingId;
      }

      id = R.id.cl_comment;
      TextInputLayout clComment = rootView.findViewById(id);
      if (clComment == null) {
        break missingId;
      }

      id = R.id.cl_shiping_date;
      TextInputLayout clShipingDate = rootView.findViewById(id);
      if (clShipingDate == null) {
        break missingId;
      }

      id = R.id.clientOrder;
      TextInputEditText clientOrder = rootView.findViewById(id);
      if (clientOrder == null) {
        break missingId;
      }

      id = R.id.clientOrderLine;
      LinearLayout clientOrderLine = rootView.findViewById(id);
      if (clientOrderLine == null) {
        break missingId;
      }

      id = R.id.comment;
      TextInputEditText comment = rootView.findViewById(id);
      if (comment == null) {
        break missingId;
      }

      id = R.id.crateOrder;
      Button crateOrder = rootView.findViewById(id);
      if (crateOrder == null) {
        break missingId;
      }

      id = R.id.editAddress;
      TextInputEditText editAddress = rootView.findViewById(id);
      if (editAddress == null) {
        break missingId;
      }

      id = R.id.line_client;
      RelativeLayout lineClient = rootView.findViewById(id);
      if (lineClient == null) {
        break missingId;
      }

      RelativeLayout orderPropBlock = (RelativeLayout) rootView;

      id = R.id.payableAmtClient;
      TextView payableAmtClient = rootView.findViewById(id);
      if (payableAmtClient == null) {
        break missingId;
      }

      id = R.id.shippingDate;
      TextInputEditText shippingDate = rootView.findViewById(id);
      if (shippingDate == null) {
        break missingId;
      }

      id = R.id.tabs;
      TabLayout tabs = rootView.findViewById(id);
      if (tabs == null) {
        break missingId;
      }

      id = R.id.textPayableAmtClient;
      TextView textPayableAmtClient = rootView.findViewById(id);
      if (textPayableAmtClient == null) {
        break missingId;
      }

      id = R.id.toolbar;
      View toolbar = rootView.findViewById(id);
      if (toolbar == null) {
        break missingId;
      }
      ToolbarBinding binding_toolbar = ToolbarBinding.bind(toolbar);

      return new ShoppingCartPropsBinding((RelativeLayout) rootView, addresses, botBlock, clAddress,
          clClient, clComment, clShipingDate, clientOrder, clientOrderLine, comment, crateOrder,
          editAddress, lineClient, orderPropBlock, payableAmtClient, shippingDate, tabs,
          textPayableAmtClient, binding_toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
