// Generated by view binder compiler. Do not edit!
package com.preethzcodez.ecommerce.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.Spinner;
import android.widget.TableLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout;
import androidx.viewbinding.ViewBinding;
import com.google.android.material.checkbox.MaterialCheckBox;
import com.google.android.material.tabs.TabLayout;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import com.preethzcodez.ecommerce.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class OrderDetailPropsBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextInputEditText addressOrder;

  @NonNull
  public final LinearLayout blProps;

  @NonNull
  public final TableLayout bottomLay;

  @NonNull
  public final MaterialCheckBox checkBoxIsBank;

  @NonNull
  public final TextInputEditText cityNP;

  @NonNull
  public final TextInputLayout clAddressOrder;

  @NonNull
  public final TextInputLayout clCityNP;

  @NonNull
  public final TextInputLayout clComment;

  @NonNull
  public final TextInputLayout clDiscont;

  @NonNull
  public final TextInputLayout clLine;

  @NonNull
  public final TextInputLayout clLogist;

  @NonNull
  public final TextInputLayout clPointNP;

  @NonNull
  public final TextInputLayout clShipping;

  @NonNull
  public final LinearLayout clShippingLine;

  @NonNull
  public final TextInputLayout clStorag;

  @NonNull
  public final TextInputEditText clientOrder;

  @NonNull
  public final TextInputEditText comment;

  @NonNull
  public final Spinner delivery;

  @NonNull
  public final Spinner disconts;

  @NonNull
  public final TextInputEditText editDelivery;

  @NonNull
  public final TextInputEditText editDiscont;

  @NonNull
  public final Button editOrder;

  @NonNull
  public final RelativeLayout orderInfo;

  @NonNull
  public final RelativeLayout orderPropBlock;

  @NonNull
  public final TextInputEditText pointNP;

  @NonNull
  public final Button saveOrderDetailBtn;

  @NonNull
  public final Button send1CButton;

  @NonNull
  public final TextInputEditText shippingDate;

  @NonNull
  public final TextInputEditText storag;

  @NonNull
  public final SwipeRefreshLayout swipeContainer;

  @NonNull
  public final TabLayout tabs;

  @NonNull
  public final ToolbarBinding toolbar;

  @NonNull
  public final TextView totalOrder;

  private OrderDetailPropsBinding(@NonNull RelativeLayout rootView,
      @NonNull TextInputEditText addressOrder, @NonNull LinearLayout blProps,
      @NonNull TableLayout bottomLay, @NonNull MaterialCheckBox checkBoxIsBank,
      @NonNull TextInputEditText cityNP, @NonNull TextInputLayout clAddressOrder,
      @NonNull TextInputLayout clCityNP, @NonNull TextInputLayout clComment,
      @NonNull TextInputLayout clDiscont, @NonNull TextInputLayout clLine,
      @NonNull TextInputLayout clLogist, @NonNull TextInputLayout clPointNP,
      @NonNull TextInputLayout clShipping, @NonNull LinearLayout clShippingLine,
      @NonNull TextInputLayout clStorag, @NonNull TextInputEditText clientOrder,
      @NonNull TextInputEditText comment, @NonNull Spinner delivery, @NonNull Spinner disconts,
      @NonNull TextInputEditText editDelivery, @NonNull TextInputEditText editDiscont,
      @NonNull Button editOrder, @NonNull RelativeLayout orderInfo,
      @NonNull RelativeLayout orderPropBlock, @NonNull TextInputEditText pointNP,
      @NonNull Button saveOrderDetailBtn, @NonNull Button send1CButton,
      @NonNull TextInputEditText shippingDate, @NonNull TextInputEditText storag,
      @NonNull SwipeRefreshLayout swipeContainer, @NonNull TabLayout tabs,
      @NonNull ToolbarBinding toolbar, @NonNull TextView totalOrder) {
    this.rootView = rootView;
    this.addressOrder = addressOrder;
    this.blProps = blProps;
    this.bottomLay = bottomLay;
    this.checkBoxIsBank = checkBoxIsBank;
    this.cityNP = cityNP;
    this.clAddressOrder = clAddressOrder;
    this.clCityNP = clCityNP;
    this.clComment = clComment;
    this.clDiscont = clDiscont;
    this.clLine = clLine;
    this.clLogist = clLogist;
    this.clPointNP = clPointNP;
    this.clShipping = clShipping;
    this.clShippingLine = clShippingLine;
    this.clStorag = clStorag;
    this.clientOrder = clientOrder;
    this.comment = comment;
    this.delivery = delivery;
    this.disconts = disconts;
    this.editDelivery = editDelivery;
    this.editDiscont = editDiscont;
    this.editOrder = editOrder;
    this.orderInfo = orderInfo;
    this.orderPropBlock = orderPropBlock;
    this.pointNP = pointNP;
    this.saveOrderDetailBtn = saveOrderDetailBtn;
    this.send1CButton = send1CButton;
    this.shippingDate = shippingDate;
    this.storag = storag;
    this.swipeContainer = swipeContainer;
    this.tabs = tabs;
    this.toolbar = toolbar;
    this.totalOrder = totalOrder;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static OrderDetailPropsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static OrderDetailPropsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.order_detail_props, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static OrderDetailPropsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.address_order;
      TextInputEditText addressOrder = rootView.findViewById(id);
      if (addressOrder == null) {
        break missingId;
      }

      id = R.id.bl_props;
      LinearLayout blProps = rootView.findViewById(id);
      if (blProps == null) {
        break missingId;
      }

      id = R.id.bottomLay;
      TableLayout bottomLay = rootView.findViewById(id);
      if (bottomLay == null) {
        break missingId;
      }

      id = R.id.checkBoxIsBank;
      MaterialCheckBox checkBoxIsBank = rootView.findViewById(id);
      if (checkBoxIsBank == null) {
        break missingId;
      }

      id = R.id.cityNP;
      TextInputEditText cityNP = rootView.findViewById(id);
      if (cityNP == null) {
        break missingId;
      }

      id = R.id.cl_address_order;
      TextInputLayout clAddressOrder = rootView.findViewById(id);
      if (clAddressOrder == null) {
        break missingId;
      }

      id = R.id.cl_cityNP;
      TextInputLayout clCityNP = rootView.findViewById(id);
      if (clCityNP == null) {
        break missingId;
      }

      id = R.id.cl_comment;
      TextInputLayout clComment = rootView.findViewById(id);
      if (clComment == null) {
        break missingId;
      }

      id = R.id.cl_discont;
      TextInputLayout clDiscont = rootView.findViewById(id);
      if (clDiscont == null) {
        break missingId;
      }

      id = R.id.cl_line;
      TextInputLayout clLine = rootView.findViewById(id);
      if (clLine == null) {
        break missingId;
      }

      id = R.id.cl_logist;
      TextInputLayout clLogist = rootView.findViewById(id);
      if (clLogist == null) {
        break missingId;
      }

      id = R.id.cl_pointNP;
      TextInputLayout clPointNP = rootView.findViewById(id);
      if (clPointNP == null) {
        break missingId;
      }

      id = R.id.cl_shipping;
      TextInputLayout clShipping = rootView.findViewById(id);
      if (clShipping == null) {
        break missingId;
      }

      id = R.id.cl_shipping_line;
      LinearLayout clShippingLine = rootView.findViewById(id);
      if (clShippingLine == null) {
        break missingId;
      }

      id = R.id.cl_storag;
      TextInputLayout clStorag = rootView.findViewById(id);
      if (clStorag == null) {
        break missingId;
      }

      id = R.id.clientOrder;
      TextInputEditText clientOrder = rootView.findViewById(id);
      if (clientOrder == null) {
        break missingId;
      }

      id = R.id.comment;
      TextInputEditText comment = rootView.findViewById(id);
      if (comment == null) {
        break missingId;
      }

      id = R.id.delivery;
      Spinner delivery = rootView.findViewById(id);
      if (delivery == null) {
        break missingId;
      }

      id = R.id.disconts;
      Spinner disconts = rootView.findViewById(id);
      if (disconts == null) {
        break missingId;
      }

      id = R.id.editDelivery;
      TextInputEditText editDelivery = rootView.findViewById(id);
      if (editDelivery == null) {
        break missingId;
      }

      id = R.id.editDiscont;
      TextInputEditText editDiscont = rootView.findViewById(id);
      if (editDiscont == null) {
        break missingId;
      }

      id = R.id.editOrder;
      Button editOrder = rootView.findViewById(id);
      if (editOrder == null) {
        break missingId;
      }

      id = R.id.orderInfo;
      RelativeLayout orderInfo = rootView.findViewById(id);
      if (orderInfo == null) {
        break missingId;
      }

      RelativeLayout orderPropBlock = (RelativeLayout) rootView;

      id = R.id.pointNP;
      TextInputEditText pointNP = rootView.findViewById(id);
      if (pointNP == null) {
        break missingId;
      }

      id = R.id.saveOrderDetailBtn;
      Button saveOrderDetailBtn = rootView.findViewById(id);
      if (saveOrderDetailBtn == null) {
        break missingId;
      }

      id = R.id.send1CButton;
      Button send1CButton = rootView.findViewById(id);
      if (send1CButton == null) {
        break missingId;
      }

      id = R.id.shippingDate;
      TextInputEditText shippingDate = rootView.findViewById(id);
      if (shippingDate == null) {
        break missingId;
      }

      id = R.id.storag;
      TextInputEditText storag = rootView.findViewById(id);
      if (storag == null) {
        break missingId;
      }

      id = R.id.swipe_container;
      SwipeRefreshLayout swipeContainer = rootView.findViewById(id);
      if (swipeContainer == null) {
        break missingId;
      }

      id = R.id.tabs;
      TabLayout tabs = rootView.findViewById(id);
      if (tabs == null) {
        break missingId;
      }

      id = R.id.toolbar;
      View toolbar = rootView.findViewById(id);
      if (toolbar == null) {
        break missingId;
      }
      ToolbarBinding binding_toolbar = ToolbarBinding.bind(toolbar);

      id = R.id.totalOrder;
      TextView totalOrder = rootView.findViewById(id);
      if (totalOrder == null) {
        break missingId;
      }

      return new OrderDetailPropsBinding((RelativeLayout) rootView, addressOrder, blProps,
          bottomLay, checkBoxIsBank, cityNP, clAddressOrder, clCityNP, clComment, clDiscont, clLine,
          clLogist, clPointNP, clShipping, clShippingLine, clStorag, clientOrder, comment, delivery,
          disconts, editDelivery, editDiscont, editOrder, orderInfo, orderPropBlock, pointNP,
          saveOrderDetailBtn, send1CButton, shippingDate, storag, swipeContainer, tabs,
          binding_toolbar, totalOrder);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
